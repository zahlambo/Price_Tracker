{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs Documentation for search_products,user_profile,profile_upadate features Introduction More and more businesses are going online. If a user can know the price of a particular product when it increases or decreases then it will be very easy for them to decide whether they should buy the product or not. We wish to solve this problem by having a website \"Price Tracker\" . In this website we are going to track prices of different products at different times. So that user can get a clear view of a product price history and make decisions based on that. This report will contain about the Search_Products, User_Profile and User_Profile_Update Features. About Home Page Description When a user browse our website In home page they can see the recent products. Here is the ScreenShot of our website's Home Page. Home page image User can be able to see the price graph by click on the images. Code Related Codes for reading data from the database router.get(\"/\", async (req, res) => { const products = await Products.find().limit(9); res.render(\"homepage\", { user: req.user, products }); }); Search Products Description In this Project one of the most important features is search products. User can able to search product as they want even they don't need to login or register. User can write anything in the search-bar. f those things are matched with any product name then those products will be shown. And when the user writes any product name also search suggestions will be shown at the bottom of the search-bar. Step-by-Step Users should visit the website. Users have to type in the search-bar which is at the top of the home page. After writing the product name they can either click on the suggestion or have to click enter to search. Here is the ScreenShot of Search products. Search image From here user also can be able to see the price graph by click on the images. Code Related Codes for searching data from the database router.get(\"/search\", async (req, res) => { const searchproduct = await Products.find({ name: new RegExp(req.query.name, \"i\"), }); res.json(searchproduct); }); For searching quary here Regular Expression used so that user can write anything in the search-bar and if any portions are matchs with any products name then thoose products will be showed. By using this regular expression users dont need to write the full name of any products. Fetch fuction for search products searchBar.addEventListener(\"keypress\", (e) => { if (e.keyCode === 13) { fetch(`/search?name=${searchBar.value}`) .then((res) => { return res.json(); }) .then((data) => { filterProducts(data); }) .catch((err) => { console.log(err); }); } }); Here also uses the ajax quary so that when user search for a product the page don't need to be reloaded. User Profile Description Registered users can be able to see their profile information. From the home page they have to login first then they can go to their profile page. In that page they are able to see their name, email and what type the user is. Step-by-Step Users should be registered . Users should visit the website and login. Users should click \u2630 icon and open the navbar Then users have to select the profile option. After that they can be able to see their information. Here is the ScreenShot of User Profile page. User Profile image From this page user can go back to home page and can logout. User Profile Update Description User can be able to edit their profile. In user profile page by clicking Edit Profile they can update their profile. After clicking edit profile button they can see two options (Change Info and Change Password). If users want to change their name or email they should select change info buttton and if users want to change to password they shoul select change password. Step-by-Step Users should be registered . Users should visit the website and login. Users should click \u2630 icon and open the navbar Then users have to select the profile option. After that they can be able to see their information. Then users have to click the Edit profile option. After clicking the option he/she will be able to see two buttons. If the user wants to update their info then they have to update their info form. After that they have to click the Change information button. If the user wants to update their password then they have to click the change password button. After that they have to write their password and also confirm the password. then click the change password button. Here is the ScreenShot of Change info and change password page. Update Information image Change Password image After changing information user should have to be click on the Change Information and Change Password button. Code Quary For Update informations router.put(\"/userEditInfo\", async (req, res) => { const user = await User.findOneAndUpdate( { _id: req.user._id }, { $set: { name: req.body.name, email: req.body.email } } ); user.save(); res.send(\"\"); }); Quary For Change password router.put(\"/changepassword\", async (req, res) => { req.body.password = bcrypt.hashSync(req.body.password, 14); const user = await User.findOneAndUpdate( { _id: req.user._id }, { $set: { password: req.body.password } } ); user.save(); res.send(\"\"); }); For Update information and change password ajax quary also uses. Both operations use fetch function so that information can changed without reloading the page. Technical Part In this project we are going to be using: Express framework of nodeJS. HTML for pages markup CSS to make page look better. Javascript for a better experience for the users. MongoDb for database","title":"Welcome to MkDocs Documentation for search_products,user_profile,profile_upadate features"},{"location":"#welcome-to-mkdocs-documentation-for-search_productsuser_profileprofile_upadate-features","text":"","title":"Welcome to MkDocs Documentation for search_products,user_profile,profile_upadate features"},{"location":"#introduction","text":"More and more businesses are going online. If a user can know the price of a particular product when it increases or decreases then it will be very easy for them to decide whether they should buy the product or not. We wish to solve this problem by having a website \"Price Tracker\" . In this website we are going to track prices of different products at different times. So that user can get a clear view of a product price history and make decisions based on that. This report will contain about the Search_Products, User_Profile and User_Profile_Update Features.","title":"Introduction"},{"location":"#about-home-page","text":"","title":"About Home Page"},{"location":"#description","text":"When a user browse our website In home page they can see the recent products. Here is the ScreenShot of our website's Home Page.","title":"Description"},{"location":"#home-page-image","text":"User can be able to see the price graph by click on the images.","title":"Home page image"},{"location":"#code","text":"Related Codes for reading data from the database router.get(\"/\", async (req, res) => { const products = await Products.find().limit(9); res.render(\"homepage\", { user: req.user, products }); });","title":"Code"},{"location":"#search-products","text":"","title":"Search Products"},{"location":"#description_1","text":"In this Project one of the most important features is search products. User can able to search product as they want even they don't need to login or register. User can write anything in the search-bar. f those things are matched with any product name then those products will be shown. And when the user writes any product name also search suggestions will be shown at the bottom of the search-bar.","title":"Description"},{"location":"#step-by-step","text":"Users should visit the website. Users have to type in the search-bar which is at the top of the home page. After writing the product name they can either click on the suggestion or have to click enter to search. Here is the ScreenShot of Search products.","title":"Step-by-Step"},{"location":"#search-image","text":"From here user also can be able to see the price graph by click on the images.","title":"Search image"},{"location":"#code_1","text":"Related Codes for searching data from the database router.get(\"/search\", async (req, res) => { const searchproduct = await Products.find({ name: new RegExp(req.query.name, \"i\"), }); res.json(searchproduct); }); For searching quary here Regular Expression used so that user can write anything in the search-bar and if any portions are matchs with any products name then thoose products will be showed. By using this regular expression users dont need to write the full name of any products. Fetch fuction for search products searchBar.addEventListener(\"keypress\", (e) => { if (e.keyCode === 13) { fetch(`/search?name=${searchBar.value}`) .then((res) => { return res.json(); }) .then((data) => { filterProducts(data); }) .catch((err) => { console.log(err); }); } }); Here also uses the ajax quary so that when user search for a product the page don't need to be reloaded.","title":"Code"},{"location":"#user-profile","text":"","title":"User Profile"},{"location":"#description_2","text":"Registered users can be able to see their profile information. From the home page they have to login first then they can go to their profile page. In that page they are able to see their name, email and what type the user is.","title":"Description"},{"location":"#step-by-step_1","text":"Users should be registered . Users should visit the website and login. Users should click \u2630 icon and open the navbar Then users have to select the profile option. After that they can be able to see their information. Here is the ScreenShot of User Profile page.","title":"Step-by-Step"},{"location":"#user-profile-image","text":"From this page user can go back to home page and can logout.","title":"User Profile image"},{"location":"#user-profile-update","text":"","title":"User Profile Update"},{"location":"#description_3","text":"User can be able to edit their profile. In user profile page by clicking Edit Profile they can update their profile. After clicking edit profile button they can see two options (Change Info and Change Password). If users want to change their name or email they should select change info buttton and if users want to change to password they shoul select change password.","title":"Description"},{"location":"#step-by-step_2","text":"Users should be registered . Users should visit the website and login. Users should click \u2630 icon and open the navbar Then users have to select the profile option. After that they can be able to see their information. Then users have to click the Edit profile option. After clicking the option he/she will be able to see two buttons. If the user wants to update their info then they have to update their info form. After that they have to click the Change information button. If the user wants to update their password then they have to click the change password button. After that they have to write their password and also confirm the password. then click the change password button. Here is the ScreenShot of Change info and change password page.","title":"Step-by-Step"},{"location":"#update-information-image","text":"","title":"Update Information image"},{"location":"#change-password-image","text":"After changing information user should have to be click on the Change Information and Change Password button.","title":"Change Password image"},{"location":"#code_2","text":"Quary For Update informations router.put(\"/userEditInfo\", async (req, res) => { const user = await User.findOneAndUpdate( { _id: req.user._id }, { $set: { name: req.body.name, email: req.body.email } } ); user.save(); res.send(\"\"); }); Quary For Change password router.put(\"/changepassword\", async (req, res) => { req.body.password = bcrypt.hashSync(req.body.password, 14); const user = await User.findOneAndUpdate( { _id: req.user._id }, { $set: { password: req.body.password } } ); user.save(); res.send(\"\"); }); For Update information and change password ajax quary also uses. Both operations use fetch function so that information can changed without reloading the page.","title":"Code"},{"location":"#technical-part","text":"In this project we are going to be using: Express framework of nodeJS. HTML for pages markup CSS to make page look better. Javascript for a better experience for the users. MongoDb for database","title":"Technical Part"}]}